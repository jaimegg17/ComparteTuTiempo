// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id // Auth0 ID as primary key
  email       String   @unique
  password    String
  name        String
  phoneNumber String?
  location    String?
  bio         String?
  skills      String[] @default([])
  imageUrl    String?
  role        UserRole @default(USER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  services    Service[]
  sentMessages    Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  ratings     Rating[]
  communities Community[]
  memberships Membership[]
  requestedExchanges Exchange[] @relation("RequestedExchanges")
  offeredExchanges   Exchange[] @relation("OfferedExchanges")
  createdGroups      Group[]

  @@map("users")
}

model Service {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  duration    Int
  location    String?
  category    ServiceCategory
  type        ServiceType
  status      ServiceStatus @default(ACTIVO)
  price       Float
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  ratings     Rating[]
  exchanges   Exchange[]

  @@map("services")
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  senderId  String
  receiverId String
  createdAt DateTime @default(now())

  // Relations
  sender    User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver  User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Rating {
  id        Int      @id @default(autoincrement())
  score     Int      @db.SmallInt
  comment   String?
  userId    String
  serviceId Int
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([userId, serviceId])
  @@map("ratings")
}

model Community {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  isPrivate   Boolean  @default(false)
  creatorId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator    User         @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  @@map("communities")
}

model Membership {
  id          Int           @id @default(autoincrement())
  userId      String
  groupId     Int
  role        MembershipRole @default(MEMBER)
  status      MembershipStatus @default(ACTIVA)
  joinedAt    DateTime      @default(now())

  // Relations
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  group      Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("memberships")
}

model Exchange {
  id            Int           @id @default(autoincrement())
  requestedById String
  offeredById   String
  serviceId     Int
  date          DateTime
  state         ExchangeStatus @default(PENDING)
  exchangedTime Decimal       @db.Decimal(5, 2)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  requestedBy  User          @relation("RequestedExchanges", fields: [requestedById], references: [id], onDelete: Cascade)
  offeredBy    User          @relation("OfferedExchanges", fields: [offeredById], references: [id], onDelete: Cascade)
  service      Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("exchanges")
}

model Event {
  id          Int      @id @default(autoincrement())
  groupId     Int
  title       String   @db.VarChar(200)
  description String?  @db.Text
  date        DateTime
  location    String?  @db.VarChar(200)
  capacity    Int?
  createdAt   DateTime @default(now())

  // Relations
  group       Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@map("events")
}

model Group {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(200)
  description String?  @db.Text
  type        GroupType @default(PUBLICO)
  isPrivate   Boolean  @default(false)
  creatorId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator     User         @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  members     Membership[]
  events      Event[]

  @@map("groups")
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

enum ServiceCategory {
  EDUCACION
  HOGAR
  TECNOLOGIA
  SALUD
  DEPORTES
  ARTE
  OTROS
}

enum ServiceType {
  PRESENCIAL
  VIRTUAL
  HIBRIDO
}

enum ServiceStatus {
  ACTIVO
  INACTIVO
  COMPLETADO
}

enum MembershipRole {
  MEMBER
  MODERATOR
  ADMIN
}

enum MembershipStatus {
  ACTIVA
  PENDIENTE
  SUSPENDIDA
}

enum ExchangeStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  DISPUTED
}

enum GroupType {
  PUBLICO
  PRIVADO
  TRABAJO
  HOBBY
}
